Assignment 18 [PW SKILLS DSA JAVA]
`````````````````````````````````````
``````````````````````````````````````````````````````````````
``````````````````````````````````````

Q1. Why do we need static keyword in java. Explain with example?

Ans. In Java, the static keyword is used to create variables or methods that belong to the class itself, rather than being associated with a particular instance of the class. There are a few reasons why static variables and methods can be useful:

1.	It is used in sharing data between instances (objects).

2.	It is used to access data without creating an instance(objects)

Here is an example that demonstrates the use of static variables and methods in Java:

public class MyClass {
    private static int count = 0; // static variable
    
    public MyClass() {
        count++; // increment the count each time a new instance is created
    }
    
    public static int getCount() { // static method
        return count; // return the count of instances
    }
}

public class Main {
    public static void main(String[] args) {
        MyClass obj1 = new MyClass();
        MyClass obj2 = new MyClass();
        MyClass obj3 = new MyClass();
        
        System.out.println(MyClass.getCount()); // prints 3
    }
}

In this example, the “MyClass” class contains a static variable “count” that is incremented each time a new instance of the class is created. It also contains a static method “getCount” that returns the current value of the “count” variable.
In the “main” method of the “Main” class, we create three instances of the “MyClass” class, which increments the “count” variable each time. Finally, we call the static “getCount” method to get the total number of instances created, which is 3 in this case.



Q2. What is class loading and how does the java program actually executes?
Ans. In Java , class loading is the process of loading class files into the JVM (Java Virtual Machine) at Runtime. It is responsible for loading classes from system, network, and Databases and making them available to the JVM for execution.

The class loading process consists of three steps:

1.	Loading: The JVM loads the class file from disk into memory. The class file contains bytecode, which is a platform-independent format that can be executed by the JVM.

2.	Linking: The JVM performs three tasks during the linking phase:

•	Verification: The JVM verifies that the bytecode is well-formed and doesn't violate any security constraints.
•	Preparation: The JVM allocates memory for static variables and initializes them with default values (0, null, etc.).
•	Resolution: The JVM resolves symbolic references (e.g., references to other classes or methods) to actual memory addresses.

3.	Initialization: The JVM initializes static variables with their initial values and runs any static initialization blocks (code that is executed when the class is first loaded).



Q3. Can we mark a local variable as static? 

Ans. No, we cannot mark a local variable as static in Java.
Static variables belong to a class, not to an instance of the class. Local variables, on the other hand, are defined within a method or block of code and only exist while the method or block is executing. Therefore, it doesn't make sense to declare a local variable as static because it would contradict the purpose of static variables.



Q4. Why is the static block executed before the main method in java?

Ans. In Java, the static block is executed before the main method because the static block is a part of the class loading process, which happens before the main method is executed.
When a Java program is started, the JVM first loads the class that contains the main method. During the class loading process, the JVM initializes all static variables and executes all static blocks in the class. Once the static blocks have completed execution, the main method is called to start the program execution.
The purpose of the static block is to initialize static variables and perform any necessary setup for the class before any instances of the class are created. By executing the static block before the main method, the JVM ensures that all necessary setup for the class has been completed before the program starts executing.



Q5. Why is the Static method also called a class method?

Ans. The static method is also called a class method because it is associated with the class rather than with an instance of the class.



Q6. What is the use of static block in java?

Ans. In Java, the static block is used to initialize static variables and perform any necessary setup for the class before any instances of the class are created.
When a class is loaded by the JVM, all static variables in the class are initialized and all static blocks are executed. The static block is useful for performing any necessary setup tasks before the class is used, such as initializing static variables, loading resources, or performing calculations that require static data.



Q7. Difference between Static and instance variables.

Ans. Static and instance variables are both used in Java to store data associated with a class, but they have some important differences:

1.	Declaration and Memory Allocation: Static variables are declared using the static keyword and are allocated memory once when the class is loaded into memory. Instance variables, on the other hand, are declared inside the class but outside any method or block and are allocated memory each time an instance of the class is created.

2.	Accessing Variables: Static variables can be accessed using the class name, without the need for an instance of the class. Instance variables, on the other hand, can only be accessed using an instance of the class.

3.	Sharing Data: Static variables are shared among all instances of the class, meaning that any changes made to a static variable by one instance will be visible to all other instances. Instance variables, on the other hand, are unique to each instance of the class, meaning that changes made to an instance variable by one instance will only affect that instance.

4.	Scope and Lifetime: Static variables have a class-level scope, which means that they can be accessed from anywhere in the class, including static and non-static methods. Instance variables have an object-level scope, which means that they can only be accessed within the class or by an instance of the class. The lifetime of a static variable is tied to the lifetime of the class, while the lifetime of an instance variable is tied to the lifetime of the object it belongs to.

5.	Initialization: Static variables can be initialized either when they are declared or in a static block. Instance variables can be initialized either when they are declared, in a constructor, or in an instance initialization block.

Example--

public class MyClass {
    private static int myStaticVariable;
    private int myInstanceVariable;
    
    public void setStaticVariable(int value) {
        myStaticVariable = value;
    }
    
    public void setInstanceVariable(int value) {
        myInstanceVariable = value;
    }
    
    public static void main(String[] args) {
        MyClass obj1 = new MyClass();
        MyClass obj2 = new MyClass();
        
        obj1.setStaticVariable(10);
        obj1.setInstanceVariable(20);
        
        obj2.setStaticVariable(30);
        obj2.setInstanceVariable(40);
        
        System.out.println(MyClass.myStaticVariable); // prints 30
        System.out.println(obj1.myInstanceVariable); // prints 20
        System.out.println(obj2.myInstanceVariable); // prints 40
    }
}



Q8. Difference between static and non-static members.

Ans. Static and non-static members are used in Java to define characteristics and behavior of a class, but they have some important differences:

1.	Declaration and Memory Allocation: Static members are declared using the static keyword and are allocated memory once when the class is loaded into memory. Non-static members, on the other hand, are declared inside the class but outside any method or block and are allocated memory each time an instance of the class is created.

2.	Accessing Members: Static members can be accessed using the class name, without the need for an instance of the class. Non-static members, on the other hand, can only be accessed using an instance of the class.

3.	Sharing Data: Static members are shared among all instances of the class, meaning that any changes made to a static member by one instance will be visible to all other instances. Non-static members, on the other hand, are unique to each instance of the class, meaning that changes made to a non-static member by one instance will only affect that instance.

4.	Scope and Lifetime: Static members have a class-level scope, which means that they can be accessed from anywhere in the class, including static and non-static methods. Non-static members have an object-level scope, which means that they can only be accessed within the class or by an instance of the class. The lifetime of a static member is tied to the lifetime of the class, while the lifetime of a non-static member is tied to the lifetime of the object it belongs to.

5.	Initialization: Static members can be initialized either when they are declared or in a static block. Non-static members can be initialized either when they are declared, in a constructor, or in an instance initialization block.

`````````````````````````````````````````````````````````````````````````````````````````````````````````
